
Download the repository and then run main.py 


1. Utils.py file 
Contains helper functions
1. conflict function: Would putting two queens in (row1, col1) and (row2, col2) conflict?
2. h function: Return number of conflicting queens for a given node. 
state: a list of length 'n' for n-queens problem, 
where the c-th element of the list holds the value for the row number of the queen in column c.

2. Hill_climbing.py

1. steepest_descent_hill_climbing: performs steepest descent hill climbing search optimization given h for initial state for N-queens problem.
2. random_state :  returns a random state tuple representing the positions of n queens on the chessboard.
3. random_restart_steepest_descent_hill_climbing :  repeatedly applies steepest descent hill climbing search with random initial states till zero cost solution is found

3. Simulated_Annealing.py:

1. simulated_annealing: implements simulated_annealing algorithm

4. Genetic_Algorithms.py:

1. Fitness: computes fitness of N-queens problem by subtracting cost (h) from 28 (max no of non attacking queen pairs on 8 X 8 chessboard)
2. Crossover: combine two parent state to produce a child state
3. Mutate: random variations in child state with 10% mutation rate
4. Genetic_algorithm:  implements genetic algorithm


5. Main.py
Executable to generate all the output asked. 
